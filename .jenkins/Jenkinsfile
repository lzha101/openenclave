// oetools-image:tag  Docker image from OE Jenkins Registry
OETOOLS_IMAGE = "oejenkinscidockerregistry.azurecr.io/oetools-azure:1.8"

def PowerShellWrapper(psCmd) {
    psCmd = psCmd.replaceAll("\r", "").replaceAll("\n", "")
    bat "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"\$ErrorActionPreference='Stop';[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\""
}

def coffeelakeTest(String compiler, String unit, String suite) {
    stage("Coffeelake $compiler $unit $suite") {
        node('hardware') {
            cleanWs()
            checkout scm

            timeout(15) {
                sh "./scripts/test-build-config -p $unit -b $suite --compiler=$compiler"
            }

        }
    }
}

def simulationTest(String compiler, String unit, String suite ) {
    stage("Coffeelake $compiler $unit $suite") {
        node {
            cleanWs()
            checkout scm

            docker.image(OETOOLS_IMAGE).inside {
                timeout(15) {
                    sh "./scripts/test-build-config -p $unit -b $suite --compiler=$compiler"
                }
            }
        }
    }
}

def nonSimulationTest() {
    stage('Non-Simulation Container SGX1-FLC RelWithDebInfo') {
        node('hardware') {
            cleanWs()
            checkout scm

            docker.image(OETOOLS_IMAGE).inside('--privileged -v /dev/sgx:/dev/sgx') {
                timeout(15) {
                    sh './scripts/test-build-config -p SGX1FLC -b RelWithDebInfo -d'
                }
            }
        }
    }
}

def checkPreCommitRequirements() {
    stage('Check pre-commit requirements') {
        node {
            cleanWs()
            checkout scm

            docker.image(OETOOLS_IMAGE).inside {
                timeout(2) {
                    sh './scripts/check-precommit-reqs'
                }
            }
        }
    }
    stage('Simulation default compiler') {
        // This particular test asserts that everything (at least
        // for simulation) can be built after using our
        // install-prereqs script to bootstrap a machine.
        node {
            cleanWs()
            checkout scm

            def buildImage = docker.build("oetools-base", '-f .jenkins/Dockerfile.scripts .')

            buildImage.inside {
                timeout(15) {
                    // This is run to test that it works with the dependencies
                    // installed by our install-prereqs script.
                    sh './scripts/check-precommit-reqs'

                    // We actually expect `ctest` to fail because it is an
                    // older version that emits a failure if any tests are
                    // skipped. In other stages, we explicitly install an
                    // updated version of CMake.
                    dir('build') {
                        sh '''
                        cmake ..
                        make
                        OE_SIMULATION=1 ctest --verbose --output-on-failure || true
                    '''
                        // Note that `make package` is not expected to work
                        // without extra configuration.
                    }
                }
            }
        }
    }
}

def windowsDebugCrossPlatform() {
    stage('Linux SGX1 Debug') {
        node {
            cleanWs()
            checkout scm
            docker.image(OETOOLS_IMAGE).inside {
                timeout(15) {
                    sh './scripts/test-build-config -p SGX1FLC -b Debug --compiler=clang-7'
                    stash includes: 'build/tests/**', name: 'linuxdebug'
                }
            }
        }
    }
    stage('Windows Debug') {
        node('SGXFLC-Windows') {
            cleanWs()
            checkout scm
            unstash 'linuxdebug'
            PowerShellWrapper('mv build linuxbin')
            PowerShellWrapper('./scripts/test-build-config.ps1 -add_windows_enclave_tests -linux_bin_dir $ENV:WORKSPACE/linuxbin/tests -build_type Debug')
       }
    }
}

def windowsReleaseCrossPlatform() {
    stage('Linux SGX1 Release') {
        node {
            cleanWs()
            checkout scm
            docker.image(OETOOLS_IMAGE).inside {
                timeout(15) {
                    sh './scripts/test-build-config -p SGX1FLC -b Release --compiler=clang-7'
                    stash includes: 'build/tests/**', name: 'linuxrelease'
                }
            }
        }
    }
    stage('Windows Release') {
        node('SGXFLC-Windows') {
            cleanWs()
            checkout scm
            unstash 'linuxrelease'
            PowerShellWrapper('mv build linuxbin')
            PowerShellWrapper('./scripts/test-build-config.ps1 -add_windows_enclave_tests -linux_bin_dir $ENV:WORKSPACE/linuxbin/tests -build_type Release')
        }
    }
}

parallel "Windows Debug Cross-platform" : { windowsDebugCrossPlatform() },
        "Windows Release Cross-platform" : { windowsReleaseCrossPlatform() }
